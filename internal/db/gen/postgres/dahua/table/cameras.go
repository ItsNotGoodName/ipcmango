//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cameras = newCamerasTable("dahua", "cameras", "")

type camerasTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Address   postgres.ColumnString
	Username  postgres.ColumnString
	Password  postgres.ColumnString
	Sequence  postgres.ColumnTimestampz
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CamerasTable struct {
	camerasTable

	EXCLUDED camerasTable
}

// AS creates new CamerasTable with assigned alias
func (a CamerasTable) AS(alias string) *CamerasTable {
	return newCamerasTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CamerasTable with assigned schema name
func (a CamerasTable) FromSchema(schemaName string) *CamerasTable {
	return newCamerasTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CamerasTable with assigned table prefix
func (a CamerasTable) WithPrefix(prefix string) *CamerasTable {
	return newCamerasTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CamerasTable with assigned table suffix
func (a CamerasTable) WithSuffix(suffix string) *CamerasTable {
	return newCamerasTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCamerasTable(schemaName, tableName, alias string) *CamerasTable {
	return &CamerasTable{
		camerasTable: newCamerasTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCamerasTableImpl("", "excluded", ""),
	}
}

func newCamerasTableImpl(schemaName, tableName, alias string) camerasTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		AddressColumn   = postgres.StringColumn("address")
		UsernameColumn  = postgres.StringColumn("username")
		PasswordColumn  = postgres.StringColumn("password")
		SequenceColumn  = postgres.TimestampzColumn("sequence")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, AddressColumn, UsernameColumn, PasswordColumn, SequenceColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{AddressColumn, UsernameColumn, PasswordColumn, SequenceColumn, CreatedAtColumn}
	)

	return camerasTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Address:   AddressColumn,
		Username:  UsernameColumn,
		Password:  PasswordColumn,
		Sequence:  SequenceColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
