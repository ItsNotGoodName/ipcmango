//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Scanner = newScannerTable("dahua", "scanner", "")

type scannerTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Lock         postgres.ColumnBool
	LockPid      postgres.ColumnString
	FullComplete postgres.ColumnBool
	FullCursor   postgres.ColumnTimestampz
	QuickCursor  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScannerTable struct {
	scannerTable

	EXCLUDED scannerTable
}

// AS creates new ScannerTable with assigned alias
func (a ScannerTable) AS(alias string) *ScannerTable {
	return newScannerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScannerTable with assigned schema name
func (a ScannerTable) FromSchema(schemaName string) *ScannerTable {
	return newScannerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScannerTable with assigned table prefix
func (a ScannerTable) WithPrefix(prefix string) *ScannerTable {
	return newScannerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScannerTable with assigned table suffix
func (a ScannerTable) WithSuffix(suffix string) *ScannerTable {
	return newScannerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScannerTable(schemaName, tableName, alias string) *ScannerTable {
	return &ScannerTable{
		scannerTable: newScannerTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newScannerTableImpl("", "excluded", ""),
	}
}

func newScannerTableImpl(schemaName, tableName, alias string) scannerTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		LockColumn         = postgres.BoolColumn("lock")
		LockPidColumn      = postgres.StringColumn("lock_pid")
		FullCompleteColumn = postgres.BoolColumn("full_complete")
		FullCursorColumn   = postgres.TimestampzColumn("full_cursor")
		QuickCursorColumn  = postgres.TimestampzColumn("quick_cursor")
		allColumns         = postgres.ColumnList{IDColumn, LockColumn, LockPidColumn, FullCompleteColumn, FullCursorColumn, QuickCursorColumn}
		mutableColumns     = postgres.ColumnList{IDColumn, LockPidColumn, FullCompleteColumn, FullCursorColumn, QuickCursorColumn}
	)

	return scannerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Lock:         LockColumn,
		LockPid:      LockPidColumn,
		FullComplete: FullCompleteColumn,
		FullCursor:   FullCursorColumn,
		QuickCursor:  QuickCursorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
