//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CompletedScans = newCompletedScansTable("dahua", "completed_scans", "")

type completedScansTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CameraID    postgres.ColumnInteger
	Kind        postgres.ColumnString
	Range       postgres.ColumnString
	RangeCursor postgres.ColumnTimestampz
	StartedAt   postgres.ColumnTimestampz
	Deleted     postgres.ColumnInteger
	Upserted    postgres.ColumnInteger
	Percent     postgres.ColumnFloat
	Duration    postgres.ColumnInteger
	Success     postgres.ColumnBool
	Error       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CompletedScansTable struct {
	completedScansTable

	EXCLUDED completedScansTable
}

// AS creates new CompletedScansTable with assigned alias
func (a CompletedScansTable) AS(alias string) *CompletedScansTable {
	return newCompletedScansTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CompletedScansTable with assigned schema name
func (a CompletedScansTable) FromSchema(schemaName string) *CompletedScansTable {
	return newCompletedScansTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CompletedScansTable with assigned table prefix
func (a CompletedScansTable) WithPrefix(prefix string) *CompletedScansTable {
	return newCompletedScansTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CompletedScansTable with assigned table suffix
func (a CompletedScansTable) WithSuffix(suffix string) *CompletedScansTable {
	return newCompletedScansTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCompletedScansTable(schemaName, tableName, alias string) *CompletedScansTable {
	return &CompletedScansTable{
		completedScansTable: newCompletedScansTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newCompletedScansTableImpl("", "excluded", ""),
	}
}

func newCompletedScansTableImpl(schemaName, tableName, alias string) completedScansTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CameraIDColumn    = postgres.IntegerColumn("camera_id")
		KindColumn        = postgres.StringColumn("kind")
		RangeColumn       = postgres.StringColumn("range")
		RangeCursorColumn = postgres.TimestampzColumn("range_cursor")
		StartedAtColumn   = postgres.TimestampzColumn("started_at")
		DeletedColumn     = postgres.IntegerColumn("deleted")
		UpsertedColumn    = postgres.IntegerColumn("upserted")
		PercentColumn     = postgres.FloatColumn("percent")
		DurationColumn    = postgres.IntegerColumn("duration")
		SuccessColumn     = postgres.BoolColumn("success")
		ErrorColumn       = postgres.StringColumn("error")
		allColumns        = postgres.ColumnList{IDColumn, CameraIDColumn, KindColumn, RangeColumn, RangeCursorColumn, StartedAtColumn, DeletedColumn, UpsertedColumn, PercentColumn, DurationColumn, SuccessColumn, ErrorColumn}
		mutableColumns    = postgres.ColumnList{CameraIDColumn, KindColumn, RangeColumn, RangeCursorColumn, StartedAtColumn, DeletedColumn, UpsertedColumn, PercentColumn, DurationColumn, ErrorColumn}
	)

	return completedScansTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CameraID:    CameraIDColumn,
		Kind:        KindColumn,
		Range:       RangeColumn,
		RangeCursor: RangeCursorColumn,
		StartedAt:   StartedAtColumn,
		Deleted:     DeletedColumn,
		Upserted:    UpsertedColumn,
		Percent:     PercentColumn,
		Duration:    DurationColumn,
		Success:     SuccessColumn,
		Error:       ErrorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
