// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package sqlc

import (
	"context"
	"encoding/json"
	"time"

	"github.com/ItsNotGoodName/ipcmanview/internal/models"
)

const createDahuaCamera = `-- name: CreateDahuaCamera :one
INSERT INTO dahua_cameras (
  name, address, username, password, location, created_at, updated_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
) RETURNING id, name, address, username, password, location, created_at, updated_at
`

type CreateDahuaCameraParams struct {
	Name      string
	Address   string
	Username  string
	Password  string
	Location  models.Location
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateDahuaCamera(ctx context.Context, arg CreateDahuaCameraParams) (DahuaCamera, error) {
	row := q.db.QueryRowContext(ctx, createDahuaCamera,
		arg.Name,
		arg.Address,
		arg.Username,
		arg.Password,
		arg.Location,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i DahuaCamera
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Username,
		&i.Password,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDahuaEvent = `-- name: CreateDahuaEvent :one
INSERT INTO dahua_events (
  camera_id,
  content_type,
  content_length,
  code,
  action,
  ` + "`" + `index` + "`" + `,
  data,
  created_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, camera_id, content_type, content_length, code, "action", ` + "`" + `index` + "`" + `, data, created_at
`

type CreateDahuaEventParams struct {
	CameraID      int64
	ContentType   string
	ContentLength int64
	Code          string
	Action        string
	Index         int64
	Data          json.RawMessage
	CreatedAt     time.Time
}

func (q *Queries) CreateDahuaEvent(ctx context.Context, arg CreateDahuaEventParams) (DahuaEvent, error) {
	row := q.db.QueryRowContext(ctx, createDahuaEvent,
		arg.CameraID,
		arg.ContentType,
		arg.ContentLength,
		arg.Code,
		arg.Action,
		arg.Index,
		arg.Data,
		arg.CreatedAt,
	)
	var i DahuaEvent
	err := row.Scan(
		&i.ID,
		&i.CameraID,
		&i.ContentType,
		&i.ContentLength,
		&i.Code,
		&i.Action,
		&i.Index,
		&i.Data,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDahuaCamera = `-- name: DeleteDahuaCamera :exec
DELETE FROM dahua_cameras WHERE id = ?
`

func (q *Queries) DeleteDahuaCamera(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDahuaCamera, id)
	return err
}

const getDahuaCamera = `-- name: GetDahuaCamera :one
SELECT id, name, address, username, password, location, created_at, updated_at FROM dahua_cameras
WHERE id = ? LIMIT 1
`

func (q *Queries) GetDahuaCamera(ctx context.Context, id int64) (DahuaCamera, error) {
	row := q.db.QueryRowContext(ctx, getDahuaCamera, id)
	var i DahuaCamera
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Username,
		&i.Password,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDahuaCamera = `-- name: ListDahuaCamera :many
SELECT id, name, address, username, password, location, created_at, updated_at FROM dahua_cameras
`

func (q *Queries) ListDahuaCamera(ctx context.Context) ([]DahuaCamera, error) {
	rows, err := q.db.QueryContext(ctx, listDahuaCamera)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DahuaCamera
	for rows.Next() {
		var i DahuaCamera
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Username,
			&i.Password,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDahuaEvent = `-- name: ListDahuaEvent :many
SELECT id, camera_id, content_type, content_length, code, "action", ` + "`" + `index` + "`" + `, data, created_at FROM dahua_events
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListDahuaEventParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListDahuaEvent(ctx context.Context, arg ListDahuaEventParams) ([]DahuaEvent, error) {
	rows, err := q.db.QueryContext(ctx, listDahuaEvent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DahuaEvent
	for rows.Next() {
		var i DahuaEvent
		if err := rows.Scan(
			&i.ID,
			&i.CameraID,
			&i.ContentType,
			&i.ContentLength,
			&i.Code,
			&i.Action,
			&i.Index,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDahuaCamera = `-- name: UpdateDahuaCamera :one
UPDATE dahua_cameras 
SET name = ?, address = ?, username = ?, password = ?, location = ?
WHERE id = ? RETURNING id, name, address, username, password, location, created_at, updated_at
`

type UpdateDahuaCameraParams struct {
	Name     string
	Address  string
	Username string
	Password string
	Location models.Location
	ID       int64
}

func (q *Queries) UpdateDahuaCamera(ctx context.Context, arg UpdateDahuaCameraParams) (DahuaCamera, error) {
	row := q.db.QueryRowContext(ctx, updateDahuaCamera,
		arg.Name,
		arg.Address,
		arg.Username,
		arg.Password,
		arg.Location,
		arg.ID,
	)
	var i DahuaCamera
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Username,
		&i.Password,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
