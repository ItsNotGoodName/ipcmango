// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies
// @generated from protobuf file "rpc.proto" (syntax proto3)
// tslint:disable
import { Admin } from "./rpc";
import type { ListGroupsResp } from "./rpc";
import type { ListGroupsReq } from "./rpc";
import { User } from "./rpc";
import type { ListMyGroupsResp } from "./rpc";
import type { ListMyGroupsReq } from "./rpc";
import type { RevokeAllSessionsResp } from "./rpc";
import type { RevokeAllSessionsReq } from "./rpc";
import type { RevokeSessionResp } from "./rpc";
import type { RevokeSessionReq } from "./rpc";
import type { UpdatePasswordResp } from "./rpc";
import type { UpdatePasswordReq } from "./rpc";
import type { UpdateUsernameResp } from "./rpc";
import type { UpdateUsernameReq } from "./rpc";
import { Page } from "./rpc";
import type { PageProfileResp } from "./rpc";
import type { PageProfileReq } from "./rpc";
import type { PageHomeResp } from "./rpc";
import type { PageHomeReq } from "./rpc";
import { Auth } from "./rpc";
import type { ForgotPasswordResp } from "./rpc";
import type { ForgotPasswordReq } from "./rpc";
import type { SignUpResp } from "./rpc";
import type { SignUpReq } from "./rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HelloWorld } from "./rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HelloResp } from "./rpc";
import type { HelloReq } from "./rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// ---------- HelloWorld

/**
 * @generated from protobuf service HelloWorld
 */
export interface IHelloWorldClient {
    /**
     * @generated from protobuf rpc: Hello(HelloReq) returns (HelloResp);
     */
    hello(input: HelloReq, options?: RpcOptions): UnaryCall<HelloReq, HelloResp>;
}
// ---------- HelloWorld

/**
 * @generated from protobuf service HelloWorld
 */
export class HelloWorldClient implements IHelloWorldClient, ServiceInfo {
    typeName = HelloWorld.typeName;
    methods = HelloWorld.methods;
    options = HelloWorld.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Hello(HelloReq) returns (HelloResp);
     */
    hello(input: HelloReq, options?: RpcOptions): UnaryCall<HelloReq, HelloResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloReq, HelloResp>("unary", this._transport, method, opt, input);
    }
}
// ---------- Auth

/**
 * @generated from protobuf service Auth
 */
export interface IAuthClient {
    /**
     * @generated from protobuf rpc: SignUp(SignUpReq) returns (SignUpResp);
     */
    signUp(input: SignUpReq, options?: RpcOptions): UnaryCall<SignUpReq, SignUpResp>;
    /**
     * @generated from protobuf rpc: ForgotPassword(ForgotPasswordReq) returns (ForgotPasswordResp);
     */
    forgotPassword(input: ForgotPasswordReq, options?: RpcOptions): UnaryCall<ForgotPasswordReq, ForgotPasswordResp>;
}
// ---------- Auth

/**
 * @generated from protobuf service Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SignUp(SignUpReq) returns (SignUpResp);
     */
    signUp(input: SignUpReq, options?: RpcOptions): UnaryCall<SignUpReq, SignUpResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignUpReq, SignUpResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ForgotPassword(ForgotPasswordReq) returns (ForgotPasswordResp);
     */
    forgotPassword(input: ForgotPasswordReq, options?: RpcOptions): UnaryCall<ForgotPasswordReq, ForgotPasswordResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ForgotPasswordReq, ForgotPasswordResp>("unary", this._transport, method, opt, input);
    }
}
// ---------- Page

/**
 * @generated from protobuf service Page
 */
export interface IPageClient {
    /**
     * @generated from protobuf rpc: Home(PageHomeReq) returns (PageHomeResp);
     */
    home(input: PageHomeReq, options?: RpcOptions): UnaryCall<PageHomeReq, PageHomeResp>;
    /**
     * @generated from protobuf rpc: Profile(PageProfileReq) returns (PageProfileResp);
     */
    profile(input: PageProfileReq, options?: RpcOptions): UnaryCall<PageProfileReq, PageProfileResp>;
}
// ---------- Page

/**
 * @generated from protobuf service Page
 */
export class PageClient implements IPageClient, ServiceInfo {
    typeName = Page.typeName;
    methods = Page.methods;
    options = Page.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Home(PageHomeReq) returns (PageHomeResp);
     */
    home(input: PageHomeReq, options?: RpcOptions): UnaryCall<PageHomeReq, PageHomeResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageHomeReq, PageHomeResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Profile(PageProfileReq) returns (PageProfileResp);
     */
    profile(input: PageProfileReq, options?: RpcOptions): UnaryCall<PageProfileReq, PageProfileResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageProfileReq, PageProfileResp>("unary", this._transport, method, opt, input);
    }
}
// ---------- User

/**
 * @generated from protobuf service User
 */
export interface IUserClient {
    /**
     * @generated from protobuf rpc: UpdateUsername(UpdateUsernameReq) returns (UpdateUsernameResp);
     */
    updateUsername(input: UpdateUsernameReq, options?: RpcOptions): UnaryCall<UpdateUsernameReq, UpdateUsernameResp>;
    /**
     * @generated from protobuf rpc: UpdatePassword(UpdatePasswordReq) returns (UpdatePasswordResp);
     */
    updatePassword(input: UpdatePasswordReq, options?: RpcOptions): UnaryCall<UpdatePasswordReq, UpdatePasswordResp>;
    /**
     * @generated from protobuf rpc: RevokeSession(RevokeSessionReq) returns (RevokeSessionResp);
     */
    revokeSession(input: RevokeSessionReq, options?: RpcOptions): UnaryCall<RevokeSessionReq, RevokeSessionResp>;
    /**
     * @generated from protobuf rpc: RevokeAllSessions(RevokeAllSessionsReq) returns (RevokeAllSessionsResp);
     */
    revokeAllSessions(input: RevokeAllSessionsReq, options?: RpcOptions): UnaryCall<RevokeAllSessionsReq, RevokeAllSessionsResp>;
    /**
     * @generated from protobuf rpc: ListMyGroups(ListMyGroupsReq) returns (ListMyGroupsResp);
     */
    listMyGroups(input: ListMyGroupsReq, options?: RpcOptions): UnaryCall<ListMyGroupsReq, ListMyGroupsResp>;
}
// ---------- User

/**
 * @generated from protobuf service User
 */
export class UserClient implements IUserClient, ServiceInfo {
    typeName = User.typeName;
    methods = User.methods;
    options = User.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: UpdateUsername(UpdateUsernameReq) returns (UpdateUsernameResp);
     */
    updateUsername(input: UpdateUsernameReq, options?: RpcOptions): UnaryCall<UpdateUsernameReq, UpdateUsernameResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUsernameReq, UpdateUsernameResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePassword(UpdatePasswordReq) returns (UpdatePasswordResp);
     */
    updatePassword(input: UpdatePasswordReq, options?: RpcOptions): UnaryCall<UpdatePasswordReq, UpdatePasswordResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePasswordReq, UpdatePasswordResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeSession(RevokeSessionReq) returns (RevokeSessionResp);
     */
    revokeSession(input: RevokeSessionReq, options?: RpcOptions): UnaryCall<RevokeSessionReq, RevokeSessionResp> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevokeSessionReq, RevokeSessionResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeAllSessions(RevokeAllSessionsReq) returns (RevokeAllSessionsResp);
     */
    revokeAllSessions(input: RevokeAllSessionsReq, options?: RpcOptions): UnaryCall<RevokeAllSessionsReq, RevokeAllSessionsResp> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevokeAllSessionsReq, RevokeAllSessionsResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListMyGroups(ListMyGroupsReq) returns (ListMyGroupsResp);
     */
    listMyGroups(input: ListMyGroupsReq, options?: RpcOptions): UnaryCall<ListMyGroupsReq, ListMyGroupsResp> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMyGroupsReq, ListMyGroupsResp>("unary", this._transport, method, opt, input);
    }
}
// ---------- Admin

/**
 * @generated from protobuf service Admin
 */
export interface IAdminClient {
    /**
     * @generated from protobuf rpc: ListGroups(ListGroupsReq) returns (ListGroupsResp);
     */
    listGroups(input: ListGroupsReq, options?: RpcOptions): UnaryCall<ListGroupsReq, ListGroupsResp>;
}
// ---------- Admin

/**
 * @generated from protobuf service Admin
 */
export class AdminClient implements IAdminClient, ServiceInfo {
    typeName = Admin.typeName;
    methods = Admin.methods;
    options = Admin.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListGroups(ListGroupsReq) returns (ListGroupsResp);
     */
    listGroups(input: ListGroupsReq, options?: RpcOptions): UnaryCall<ListGroupsReq, ListGroupsResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListGroupsReq, ListGroupsResp>("unary", this._transport, method, opt, input);
    }
}
