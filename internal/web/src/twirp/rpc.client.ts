// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies
// @generated from protobuf file "rpc.proto" (syntax proto3)
// tslint:disable
import { User } from "./rpc";
import type { UserListGroupResp } from "./rpc";
import type { UserListGroupReq } from "./rpc";
import type { UserRevokeAllSessionsResp } from "./rpc";
import type { UserRevokeAllSessionsReq } from "./rpc";
import type { UserRevokeSessionResp } from "./rpc";
import type { UserRevokeSessionReq } from "./rpc";
import type { UserUpdatePasswordResp } from "./rpc";
import type { UserUpdatePasswordReq } from "./rpc";
import type { UserUpdateUsernameResp } from "./rpc";
import type { UserUpdateUsernameReq } from "./rpc";
import { Page } from "./rpc";
import type { PageProfileResp } from "./rpc";
import type { PageProfileReq } from "./rpc";
import type { PageHomeResp } from "./rpc";
import type { PageHomeReq } from "./rpc";
import { Auth } from "./rpc";
import type { AuthForgotResp } from "./rpc";
import type { AuthForgotReq } from "./rpc";
import type { AuthSignUpResp } from "./rpc";
import type { AuthSignUpReq } from "./rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HelloWorld } from "./rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HelloResp } from "./rpc";
import type { HelloReq } from "./rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service HelloWorld
 */
export interface IHelloWorldClient {
    /**
     * @generated from protobuf rpc: Hello(HelloReq) returns (HelloResp);
     */
    hello(input: HelloReq, options?: RpcOptions): UnaryCall<HelloReq, HelloResp>;
}
/**
 * @generated from protobuf service HelloWorld
 */
export class HelloWorldClient implements IHelloWorldClient, ServiceInfo {
    typeName = HelloWorld.typeName;
    methods = HelloWorld.methods;
    options = HelloWorld.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Hello(HelloReq) returns (HelloResp);
     */
    hello(input: HelloReq, options?: RpcOptions): UnaryCall<HelloReq, HelloResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloReq, HelloResp>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service Auth
 */
export interface IAuthClient {
    /**
     * @generated from protobuf rpc: SignUp(AuthSignUpReq) returns (AuthSignUpResp);
     */
    signUp(input: AuthSignUpReq, options?: RpcOptions): UnaryCall<AuthSignUpReq, AuthSignUpResp>;
    /**
     * @generated from protobuf rpc: Forgot(AuthForgotReq) returns (AuthForgotResp);
     */
    forgot(input: AuthForgotReq, options?: RpcOptions): UnaryCall<AuthForgotReq, AuthForgotResp>;
}
/**
 * @generated from protobuf service Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SignUp(AuthSignUpReq) returns (AuthSignUpResp);
     */
    signUp(input: AuthSignUpReq, options?: RpcOptions): UnaryCall<AuthSignUpReq, AuthSignUpResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthSignUpReq, AuthSignUpResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Forgot(AuthForgotReq) returns (AuthForgotResp);
     */
    forgot(input: AuthForgotReq, options?: RpcOptions): UnaryCall<AuthForgotReq, AuthForgotResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthForgotReq, AuthForgotResp>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service Page
 */
export interface IPageClient {
    /**
     * @generated from protobuf rpc: Home(PageHomeReq) returns (PageHomeResp);
     */
    home(input: PageHomeReq, options?: RpcOptions): UnaryCall<PageHomeReq, PageHomeResp>;
    /**
     * @generated from protobuf rpc: Profile(PageProfileReq) returns (PageProfileResp);
     */
    profile(input: PageProfileReq, options?: RpcOptions): UnaryCall<PageProfileReq, PageProfileResp>;
}
/**
 * @generated from protobuf service Page
 */
export class PageClient implements IPageClient, ServiceInfo {
    typeName = Page.typeName;
    methods = Page.methods;
    options = Page.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Home(PageHomeReq) returns (PageHomeResp);
     */
    home(input: PageHomeReq, options?: RpcOptions): UnaryCall<PageHomeReq, PageHomeResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageHomeReq, PageHomeResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Profile(PageProfileReq) returns (PageProfileResp);
     */
    profile(input: PageProfileReq, options?: RpcOptions): UnaryCall<PageProfileReq, PageProfileResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageProfileReq, PageProfileResp>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service User
 */
export interface IUserClient {
    /**
     * @generated from protobuf rpc: UpdateUsername(UserUpdateUsernameReq) returns (UserUpdateUsernameResp);
     */
    updateUsername(input: UserUpdateUsernameReq, options?: RpcOptions): UnaryCall<UserUpdateUsernameReq, UserUpdateUsernameResp>;
    /**
     * @generated from protobuf rpc: UpdatePassword(UserUpdatePasswordReq) returns (UserUpdatePasswordResp);
     */
    updatePassword(input: UserUpdatePasswordReq, options?: RpcOptions): UnaryCall<UserUpdatePasswordReq, UserUpdatePasswordResp>;
    /**
     * @generated from protobuf rpc: RevokeSession(UserRevokeSessionReq) returns (UserRevokeSessionResp);
     */
    revokeSession(input: UserRevokeSessionReq, options?: RpcOptions): UnaryCall<UserRevokeSessionReq, UserRevokeSessionResp>;
    /**
     * @generated from protobuf rpc: RevokeAllSessions(UserRevokeAllSessionsReq) returns (UserRevokeAllSessionsResp);
     */
    revokeAllSessions(input: UserRevokeAllSessionsReq, options?: RpcOptions): UnaryCall<UserRevokeAllSessionsReq, UserRevokeAllSessionsResp>;
    /**
     * @generated from protobuf rpc: ListGroup(UserListGroupReq) returns (UserListGroupResp);
     */
    listGroup(input: UserListGroupReq, options?: RpcOptions): UnaryCall<UserListGroupReq, UserListGroupResp>;
}
/**
 * @generated from protobuf service User
 */
export class UserClient implements IUserClient, ServiceInfo {
    typeName = User.typeName;
    methods = User.methods;
    options = User.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: UpdateUsername(UserUpdateUsernameReq) returns (UserUpdateUsernameResp);
     */
    updateUsername(input: UserUpdateUsernameReq, options?: RpcOptions): UnaryCall<UserUpdateUsernameReq, UserUpdateUsernameResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserUpdateUsernameReq, UserUpdateUsernameResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePassword(UserUpdatePasswordReq) returns (UserUpdatePasswordResp);
     */
    updatePassword(input: UserUpdatePasswordReq, options?: RpcOptions): UnaryCall<UserUpdatePasswordReq, UserUpdatePasswordResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserUpdatePasswordReq, UserUpdatePasswordResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeSession(UserRevokeSessionReq) returns (UserRevokeSessionResp);
     */
    revokeSession(input: UserRevokeSessionReq, options?: RpcOptions): UnaryCall<UserRevokeSessionReq, UserRevokeSessionResp> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserRevokeSessionReq, UserRevokeSessionResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeAllSessions(UserRevokeAllSessionsReq) returns (UserRevokeAllSessionsResp);
     */
    revokeAllSessions(input: UserRevokeAllSessionsReq, options?: RpcOptions): UnaryCall<UserRevokeAllSessionsReq, UserRevokeAllSessionsResp> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserRevokeAllSessionsReq, UserRevokeAllSessionsResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListGroup(UserListGroupReq) returns (UserListGroupResp);
     */
    listGroup(input: UserListGroupReq, options?: RpcOptions): UnaryCall<UserListGroupReq, UserListGroupResp> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserListGroupReq, UserListGroupResp>("unary", this._transport, method, opt, input);
    }
}
