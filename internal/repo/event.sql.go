// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/ItsNotGoodName/ipcmanview/internal/core"
	"github.com/ItsNotGoodName/ipcmanview/internal/models"
	"github.com/ItsNotGoodName/ipcmanview/internal/types"
)

const getEventCursor = `-- name: GetEventCursor :one
SELECT
  id
from
  events
ORDER BY
  id DESC
LIMIT
  1
`

func (q *Queries) GetEventCursor(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getEventCursor)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const nextEventByCursor = `-- name: NextEventByCursor :one
SELECT
  id, "action", slug, actor, user_id, created_at
from
  events
WHERE
  id > ?
LIMIT
  1
`

func (q *Queries) NextEventByCursor(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, nextEventByCursor, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.Slug,
		&i.Actor,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createEvent = `-- name: createEvent :one
INSERT INTO
  events (action, slug, user_id, actor, created_at)
VALUES
  (?, ?, ?, ?, ?) RETURNING id
`

type createEventParams struct {
	Action    models.EventAction
	Slug      string
	UserID    sql.NullInt64
	Actor     core.ActorType
	CreatedAt types.Time
}

func (q *Queries) createEvent(ctx context.Context, arg createEventParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Action,
		arg.Slug,
		arg.UserID,
		arg.Actor,
		arg.CreatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
