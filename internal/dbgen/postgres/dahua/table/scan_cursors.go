//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ScanCursors = newScanCursorsTable("dahua", "scan_cursors", "")

type scanCursorsTable struct {
	postgres.Table

	// Columns
	CameraID     postgres.ColumnInteger
	QuickCursor  postgres.ColumnTimestampz
	FullCursor   postgres.ColumnTimestampz
	FullEpoch    postgres.ColumnTimestampz
	FullComplete postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScanCursorsTable struct {
	scanCursorsTable

	EXCLUDED scanCursorsTable
}

// AS creates new ScanCursorsTable with assigned alias
func (a ScanCursorsTable) AS(alias string) *ScanCursorsTable {
	return newScanCursorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScanCursorsTable with assigned schema name
func (a ScanCursorsTable) FromSchema(schemaName string) *ScanCursorsTable {
	return newScanCursorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScanCursorsTable with assigned table prefix
func (a ScanCursorsTable) WithPrefix(prefix string) *ScanCursorsTable {
	return newScanCursorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScanCursorsTable with assigned table suffix
func (a ScanCursorsTable) WithSuffix(suffix string) *ScanCursorsTable {
	return newScanCursorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScanCursorsTable(schemaName, tableName, alias string) *ScanCursorsTable {
	return &ScanCursorsTable{
		scanCursorsTable: newScanCursorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newScanCursorsTableImpl("", "excluded", ""),
	}
}

func newScanCursorsTableImpl(schemaName, tableName, alias string) scanCursorsTable {
	var (
		CameraIDColumn     = postgres.IntegerColumn("camera_id")
		QuickCursorColumn  = postgres.TimestampzColumn("quick_cursor")
		FullCursorColumn   = postgres.TimestampzColumn("full_cursor")
		FullEpochColumn    = postgres.TimestampzColumn("full_epoch")
		FullCompleteColumn = postgres.BoolColumn("full_complete")
		allColumns         = postgres.ColumnList{CameraIDColumn, QuickCursorColumn, FullCursorColumn, FullEpochColumn, FullCompleteColumn}
		mutableColumns     = postgres.ColumnList{CameraIDColumn, QuickCursorColumn, FullCursorColumn, FullEpochColumn}
	)

	return scanCursorsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CameraID:     CameraIDColumn,
		QuickCursor:  QuickCursorColumn,
		FullCursor:   FullCursorColumn,
		FullEpoch:    FullEpochColumn,
		FullComplete: FullCompleteColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
