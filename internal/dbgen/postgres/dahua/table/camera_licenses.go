//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CameraLicenses = newCameraLicensesTable("dahua", "camera_licenses", "")

type cameraLicensesTable struct {
	postgres.Table

	// Columns
	CameraID      postgres.ColumnInteger
	AbroadInfo    postgres.ColumnString
	AllType       postgres.ColumnBool
	DigitChannel  postgres.ColumnInteger
	EffectiveDays postgres.ColumnInteger
	EffectiveTime postgres.ColumnInteger
	EffectiveAt   postgres.ColumnTimestampz
	LicenseID     postgres.ColumnInteger
	ProductType   postgres.ColumnString
	Status        postgres.ColumnInteger
	Username      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CameraLicensesTable struct {
	cameraLicensesTable

	EXCLUDED cameraLicensesTable
}

// AS creates new CameraLicensesTable with assigned alias
func (a CameraLicensesTable) AS(alias string) *CameraLicensesTable {
	return newCameraLicensesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CameraLicensesTable with assigned schema name
func (a CameraLicensesTable) FromSchema(schemaName string) *CameraLicensesTable {
	return newCameraLicensesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CameraLicensesTable with assigned table prefix
func (a CameraLicensesTable) WithPrefix(prefix string) *CameraLicensesTable {
	return newCameraLicensesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CameraLicensesTable with assigned table suffix
func (a CameraLicensesTable) WithSuffix(suffix string) *CameraLicensesTable {
	return newCameraLicensesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCameraLicensesTable(schemaName, tableName, alias string) *CameraLicensesTable {
	return &CameraLicensesTable{
		cameraLicensesTable: newCameraLicensesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newCameraLicensesTableImpl("", "excluded", ""),
	}
}

func newCameraLicensesTableImpl(schemaName, tableName, alias string) cameraLicensesTable {
	var (
		CameraIDColumn      = postgres.IntegerColumn("camera_id")
		AbroadInfoColumn    = postgres.StringColumn("abroad_info")
		AllTypeColumn       = postgres.BoolColumn("all_type")
		DigitChannelColumn  = postgres.IntegerColumn("digit_channel")
		EffectiveDaysColumn = postgres.IntegerColumn("effective_days")
		EffectiveTimeColumn = postgres.IntegerColumn("effective_time")
		EffectiveAtColumn   = postgres.TimestampzColumn("effective_at")
		LicenseIDColumn     = postgres.IntegerColumn("license_id")
		ProductTypeColumn   = postgres.StringColumn("product_type")
		StatusColumn        = postgres.IntegerColumn("status")
		UsernameColumn      = postgres.StringColumn("username")
		allColumns          = postgres.ColumnList{CameraIDColumn, AbroadInfoColumn, AllTypeColumn, DigitChannelColumn, EffectiveDaysColumn, EffectiveTimeColumn, EffectiveAtColumn, LicenseIDColumn, ProductTypeColumn, StatusColumn, UsernameColumn}
		mutableColumns      = postgres.ColumnList{CameraIDColumn, AbroadInfoColumn, AllTypeColumn, DigitChannelColumn, EffectiveDaysColumn, EffectiveTimeColumn, LicenseIDColumn, ProductTypeColumn, StatusColumn, UsernameColumn}
	)

	return cameraLicensesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CameraID:      CameraIDColumn,
		AbroadInfo:    AbroadInfoColumn,
		AllType:       AllTypeColumn,
		DigitChannel:  DigitChannelColumn,
		EffectiveDays: EffectiveDaysColumn,
		EffectiveTime: EffectiveTimeColumn,
		EffectiveAt:   EffectiveAtColumn,
		LicenseID:     LicenseIDColumn,
		ProductType:   ProductTypeColumn,
		Status:        StatusColumn,
		Username:      UsernameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
