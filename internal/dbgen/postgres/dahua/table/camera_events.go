//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CameraEvents = newCameraEventsTable("dahua", "camera_events", "")

type cameraEventsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	CameraID      postgres.ColumnInteger
	ContentType   postgres.ColumnString
	ContentLength postgres.ColumnInteger
	Code          postgres.ColumnString
	Action        postgres.ColumnString
	Index         postgres.ColumnInteger
	Data          postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CameraEventsTable struct {
	cameraEventsTable

	EXCLUDED cameraEventsTable
}

// AS creates new CameraEventsTable with assigned alias
func (a CameraEventsTable) AS(alias string) *CameraEventsTable {
	return newCameraEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CameraEventsTable with assigned schema name
func (a CameraEventsTable) FromSchema(schemaName string) *CameraEventsTable {
	return newCameraEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CameraEventsTable with assigned table prefix
func (a CameraEventsTable) WithPrefix(prefix string) *CameraEventsTable {
	return newCameraEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CameraEventsTable with assigned table suffix
func (a CameraEventsTable) WithSuffix(suffix string) *CameraEventsTable {
	return newCameraEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCameraEventsTable(schemaName, tableName, alias string) *CameraEventsTable {
	return &CameraEventsTable{
		cameraEventsTable: newCameraEventsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCameraEventsTableImpl("", "excluded", ""),
	}
}

func newCameraEventsTableImpl(schemaName, tableName, alias string) cameraEventsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		CameraIDColumn      = postgres.IntegerColumn("camera_id")
		ContentTypeColumn   = postgres.StringColumn("content_type")
		ContentLengthColumn = postgres.IntegerColumn("content_length")
		CodeColumn          = postgres.StringColumn("code")
		ActionColumn        = postgres.StringColumn("action")
		IndexColumn         = postgres.IntegerColumn("index")
		DataColumn          = postgres.StringColumn("data")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		allColumns          = postgres.ColumnList{IDColumn, CameraIDColumn, ContentTypeColumn, ContentLengthColumn, CodeColumn, ActionColumn, IndexColumn, DataColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{CameraIDColumn, ContentTypeColumn, ContentLengthColumn, CodeColumn, ActionColumn, IndexColumn, DataColumn, CreatedAtColumn}
	)

	return cameraEventsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CameraID:      CameraIDColumn,
		ContentType:   ContentTypeColumn,
		ContentLength: ContentLengthColumn,
		Code:          CodeColumn,
		Action:        ActionColumn,
		Index:         IndexColumn,
		Data:          DataColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
