//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ScanCompleteTasks = newScanCompleteTasksTable("dahua", "scan_complete_tasks", "")

type scanCompleteTasksTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	CameraID  postgres.ColumnInteger
	Kind      postgres.ColumnString
	Range     postgres.ColumnString
	Cursor    postgres.ColumnTimestampz
	StartedAt postgres.ColumnTimestampz
	Deleted   postgres.ColumnInteger
	Upserted  postgres.ColumnInteger
	Percent   postgres.ColumnFloat
	Duration  postgres.ColumnInteger
	Success   postgres.ColumnBool
	Error     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScanCompleteTasksTable struct {
	scanCompleteTasksTable

	EXCLUDED scanCompleteTasksTable
}

// AS creates new ScanCompleteTasksTable with assigned alias
func (a ScanCompleteTasksTable) AS(alias string) *ScanCompleteTasksTable {
	return newScanCompleteTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScanCompleteTasksTable with assigned schema name
func (a ScanCompleteTasksTable) FromSchema(schemaName string) *ScanCompleteTasksTable {
	return newScanCompleteTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScanCompleteTasksTable with assigned table prefix
func (a ScanCompleteTasksTable) WithPrefix(prefix string) *ScanCompleteTasksTable {
	return newScanCompleteTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScanCompleteTasksTable with assigned table suffix
func (a ScanCompleteTasksTable) WithSuffix(suffix string) *ScanCompleteTasksTable {
	return newScanCompleteTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScanCompleteTasksTable(schemaName, tableName, alias string) *ScanCompleteTasksTable {
	return &ScanCompleteTasksTable{
		scanCompleteTasksTable: newScanCompleteTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newScanCompleteTasksTableImpl("", "excluded", ""),
	}
}

func newScanCompleteTasksTableImpl(schemaName, tableName, alias string) scanCompleteTasksTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CameraIDColumn  = postgres.IntegerColumn("camera_id")
		KindColumn      = postgres.StringColumn("kind")
		RangeColumn     = postgres.StringColumn("range")
		CursorColumn    = postgres.TimestampzColumn("cursor")
		StartedAtColumn = postgres.TimestampzColumn("started_at")
		DeletedColumn   = postgres.IntegerColumn("deleted")
		UpsertedColumn  = postgres.IntegerColumn("upserted")
		PercentColumn   = postgres.FloatColumn("percent")
		DurationColumn  = postgres.IntegerColumn("duration")
		SuccessColumn   = postgres.BoolColumn("success")
		ErrorColumn     = postgres.StringColumn("error")
		allColumns      = postgres.ColumnList{IDColumn, CameraIDColumn, KindColumn, RangeColumn, CursorColumn, StartedAtColumn, DeletedColumn, UpsertedColumn, PercentColumn, DurationColumn, SuccessColumn, ErrorColumn}
		mutableColumns  = postgres.ColumnList{CameraIDColumn, KindColumn, RangeColumn, CursorColumn, StartedAtColumn, DeletedColumn, UpsertedColumn, PercentColumn, DurationColumn, ErrorColumn}
	)

	return scanCompleteTasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CameraID:  CameraIDColumn,
		Kind:      KindColumn,
		Range:     RangeColumn,
		Cursor:    CursorColumn,
		StartedAt: StartedAtColumn,
		Deleted:   DeletedColumn,
		Upserted:  UpsertedColumn,
		Percent:   PercentColumn,
		Duration:  DurationColumn,
		Success:   SuccessColumn,
		Error:     ErrorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
