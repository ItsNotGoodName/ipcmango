//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ScanActiveTasks = newScanActiveTasksTable("dahua", "scan_active_tasks", "")

type scanActiveTasksTable struct {
	postgres.Table

	// Columns
	QueueID   postgres.ColumnInteger
	CameraID  postgres.ColumnInteger
	Kind      postgres.ColumnString
	Range     postgres.ColumnString
	Cursor    postgres.ColumnTimestampz
	StartedAt postgres.ColumnTimestampz
	Deleted   postgres.ColumnInteger
	Upserted  postgres.ColumnInteger
	Percent   postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScanActiveTasksTable struct {
	scanActiveTasksTable

	EXCLUDED scanActiveTasksTable
}

// AS creates new ScanActiveTasksTable with assigned alias
func (a ScanActiveTasksTable) AS(alias string) *ScanActiveTasksTable {
	return newScanActiveTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScanActiveTasksTable with assigned schema name
func (a ScanActiveTasksTable) FromSchema(schemaName string) *ScanActiveTasksTable {
	return newScanActiveTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScanActiveTasksTable with assigned table prefix
func (a ScanActiveTasksTable) WithPrefix(prefix string) *ScanActiveTasksTable {
	return newScanActiveTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScanActiveTasksTable with assigned table suffix
func (a ScanActiveTasksTable) WithSuffix(suffix string) *ScanActiveTasksTable {
	return newScanActiveTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScanActiveTasksTable(schemaName, tableName, alias string) *ScanActiveTasksTable {
	return &ScanActiveTasksTable{
		scanActiveTasksTable: newScanActiveTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newScanActiveTasksTableImpl("", "excluded", ""),
	}
}

func newScanActiveTasksTableImpl(schemaName, tableName, alias string) scanActiveTasksTable {
	var (
		QueueIDColumn   = postgres.IntegerColumn("queue_id")
		CameraIDColumn  = postgres.IntegerColumn("camera_id")
		KindColumn      = postgres.StringColumn("kind")
		RangeColumn     = postgres.StringColumn("range")
		CursorColumn    = postgres.TimestampzColumn("cursor")
		StartedAtColumn = postgres.TimestampzColumn("started_at")
		DeletedColumn   = postgres.IntegerColumn("deleted")
		UpsertedColumn  = postgres.IntegerColumn("upserted")
		PercentColumn   = postgres.FloatColumn("percent")
		allColumns      = postgres.ColumnList{QueueIDColumn, CameraIDColumn, KindColumn, RangeColumn, CursorColumn, StartedAtColumn, DeletedColumn, UpsertedColumn, PercentColumn}
		mutableColumns  = postgres.ColumnList{QueueIDColumn, CameraIDColumn, KindColumn, RangeColumn, CursorColumn, StartedAtColumn, DeletedColumn, UpsertedColumn, PercentColumn}
	)

	return scanActiveTasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		QueueID:   QueueIDColumn,
		CameraID:  CameraIDColumn,
		Kind:      KindColumn,
		Range:     RangeColumn,
		Cursor:    CursorColumn,
		StartedAt: StartedAtColumn,
		Deleted:   DeletedColumn,
		Upserted:  UpsertedColumn,
		Percent:   PercentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
