//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserSessions = newUserSessionsTable("public", "user_sessions", "")

type userSessionsTable struct {
	postgres.Table

	// Columns
	UserID     postgres.ColumnInteger
	Token      postgres.ColumnString
	ClientID   postgres.ColumnString
	IPAddress  postgres.ColumnString
	ExpiredAt  postgres.ColumnTimestampz
	LastUsedAt postgres.ColumnTimestampz
	IssuedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserSessionsTable struct {
	userSessionsTable

	EXCLUDED userSessionsTable
}

// AS creates new UserSessionsTable with assigned alias
func (a UserSessionsTable) AS(alias string) *UserSessionsTable {
	return newUserSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSessionsTable with assigned schema name
func (a UserSessionsTable) FromSchema(schemaName string) *UserSessionsTable {
	return newUserSessionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSessionsTable with assigned table prefix
func (a UserSessionsTable) WithPrefix(prefix string) *UserSessionsTable {
	return newUserSessionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSessionsTable with assigned table suffix
func (a UserSessionsTable) WithSuffix(suffix string) *UserSessionsTable {
	return newUserSessionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSessionsTable(schemaName, tableName, alias string) *UserSessionsTable {
	return &UserSessionsTable{
		userSessionsTable: newUserSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserSessionsTableImpl("", "excluded", ""),
	}
}

func newUserSessionsTableImpl(schemaName, tableName, alias string) userSessionsTable {
	var (
		UserIDColumn     = postgres.IntegerColumn("user_id")
		TokenColumn      = postgres.StringColumn("token")
		ClientIDColumn   = postgres.StringColumn("client_id")
		IPAddressColumn  = postgres.StringColumn("ip_address")
		ExpiredAtColumn  = postgres.TimestampzColumn("expired_at")
		LastUsedAtColumn = postgres.TimestampzColumn("last_used_at")
		IssuedAtColumn   = postgres.TimestampzColumn("issued_at")
		allColumns       = postgres.ColumnList{UserIDColumn, TokenColumn, ClientIDColumn, IPAddressColumn, ExpiredAtColumn, LastUsedAtColumn, IssuedAtColumn}
		mutableColumns   = postgres.ColumnList{UserIDColumn, TokenColumn, ClientIDColumn, IPAddressColumn, ExpiredAtColumn, LastUsedAtColumn, IssuedAtColumn}
	)

	return userSessionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		Token:      TokenColumn,
		ClientID:   ClientIDColumn,
		IPAddress:  IPAddressColumn,
		ExpiredAt:  ExpiredAtColumn,
		LastUsedAt: LastUsedAtColumn,
		IssuedAt:   IssuedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
