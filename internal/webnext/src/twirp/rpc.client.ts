// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies
// @generated from protobuf file "rpc.proto" (syntax proto3)
// tslint:disable
import { Page } from "./rpc";
import type { PageProfileResp } from "./rpc";
import type { PageProfileReq } from "./rpc";
import { Auth } from "./rpc";
import type { AuthResetPasswordResp } from "./rpc";
import type { AuthResetPasswordReq } from "./rpc";
import type { AuthSignInResp } from "./rpc";
import type { AuthSignInReq } from "./rpc";
import type { AuthSignUpResp } from "./rpc";
import type { AuthSignUpReq } from "./rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HelloWorld } from "./rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HelloResp } from "./rpc";
import type { HelloReq } from "./rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service HelloWorld
 */
export interface IHelloWorldClient {
    /**
     * @generated from protobuf rpc: Hello(HelloReq) returns (HelloResp);
     */
    hello(input: HelloReq, options?: RpcOptions): UnaryCall<HelloReq, HelloResp>;
}
/**
 * @generated from protobuf service HelloWorld
 */
export class HelloWorldClient implements IHelloWorldClient, ServiceInfo {
    typeName = HelloWorld.typeName;
    methods = HelloWorld.methods;
    options = HelloWorld.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Hello(HelloReq) returns (HelloResp);
     */
    hello(input: HelloReq, options?: RpcOptions): UnaryCall<HelloReq, HelloResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloReq, HelloResp>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service Auth
 */
export interface IAuthClient {
    /**
     * @generated from protobuf rpc: SignUp(AuthSignUpReq) returns (AuthSignUpResp);
     */
    signUp(input: AuthSignUpReq, options?: RpcOptions): UnaryCall<AuthSignUpReq, AuthSignUpResp>;
    /**
     * @generated from protobuf rpc: SignIn(AuthSignInReq) returns (AuthSignInResp);
     */
    signIn(input: AuthSignInReq, options?: RpcOptions): UnaryCall<AuthSignInReq, AuthSignInResp>;
    /**
     * @generated from protobuf rpc: ResetPassword(AuthResetPasswordReq) returns (AuthResetPasswordResp);
     */
    resetPassword(input: AuthResetPasswordReq, options?: RpcOptions): UnaryCall<AuthResetPasswordReq, AuthResetPasswordResp>;
}
/**
 * @generated from protobuf service Auth
 */
export class AuthClient implements IAuthClient, ServiceInfo {
    typeName = Auth.typeName;
    methods = Auth.methods;
    options = Auth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SignUp(AuthSignUpReq) returns (AuthSignUpResp);
     */
    signUp(input: AuthSignUpReq, options?: RpcOptions): UnaryCall<AuthSignUpReq, AuthSignUpResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthSignUpReq, AuthSignUpResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SignIn(AuthSignInReq) returns (AuthSignInResp);
     */
    signIn(input: AuthSignInReq, options?: RpcOptions): UnaryCall<AuthSignInReq, AuthSignInResp> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthSignInReq, AuthSignInResp>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetPassword(AuthResetPasswordReq) returns (AuthResetPasswordResp);
     */
    resetPassword(input: AuthResetPasswordReq, options?: RpcOptions): UnaryCall<AuthResetPasswordReq, AuthResetPasswordResp> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthResetPasswordReq, AuthResetPasswordResp>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service Page
 */
export interface IPageClient {
    /**
     * @generated from protobuf rpc: Profile(PageProfileReq) returns (PageProfileResp);
     */
    profile(input: PageProfileReq, options?: RpcOptions): UnaryCall<PageProfileReq, PageProfileResp>;
}
/**
 * @generated from protobuf service Page
 */
export class PageClient implements IPageClient, ServiceInfo {
    typeName = Page.typeName;
    methods = Page.methods;
    options = Page.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Profile(PageProfileReq) returns (PageProfileResp);
     */
    profile(input: PageProfileReq, options?: RpcOptions): UnaryCall<PageProfileReq, PageProfileResp> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PageProfileReq, PageProfileResp>("unary", this._transport, method, opt, input);
    }
}
