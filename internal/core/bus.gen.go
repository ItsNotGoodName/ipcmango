// Code generated by generate-bus.go; DO NOT EDIT.
package core

import (
	"context"
	"github.com/ItsNotGoodName/ipcmanview/internal/models"
	"github.com/ItsNotGoodName/ipcmanview/pkg/pubsub"
	"github.com/ItsNotGoodName/ipcmanview/pkg/sutureext"
	"github.com/rs/zerolog/log"
)

func busLogError(err error) {
	if err != nil {
		log.Err(err).Str("package", "core").Msg("Failed to handle event")
	}
}

func NewBus() *Bus {
	return &Bus{
		ServiceContext: sutureext.NewServiceContext("core.Bus"),
	}
}

type Bus struct {
	sutureext.ServiceContext
	onEventDahuaDeviceCreated []func(ctx context.Context, event models.EventDahuaDeviceCreated) error
	onEventDahuaDeviceUpdated []func(ctx context.Context, event models.EventDahuaDeviceUpdated) error
	onEventDahuaDeviceDeleted []func(ctx context.Context, event models.EventDahuaDeviceDeleted) error
	onEventDahuaDeviceEvent []func(ctx context.Context, event models.EventDahuaDeviceEvent) error
	onEventDahuaEventWorkerConnecting []func(ctx context.Context, event models.EventDahuaEventWorkerConnecting) error
	onEventDahuaEventWorkerConnect []func(ctx context.Context, event models.EventDahuaEventWorkerConnect) error
	onEventDahuaEventWorkerDisconnect []func(ctx context.Context, event models.EventDahuaEventWorkerDisconnect) error
	onEventDahuaCoaxialStatus []func(ctx context.Context, event models.EventDahuaCoaxialStatus) error
}

func (b *Bus) Register(pub pubsub.Pub)(*Bus) {
	b.OnEventDahuaDeviceCreated(func(ctx context.Context, event models.EventDahuaDeviceCreated) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaDeviceUpdated(func(ctx context.Context, event models.EventDahuaDeviceUpdated) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaDeviceDeleted(func(ctx context.Context, event models.EventDahuaDeviceDeleted) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaDeviceEvent(func(ctx context.Context, event models.EventDahuaDeviceEvent) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaEventWorkerConnecting(func(ctx context.Context, event models.EventDahuaEventWorkerConnecting) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaEventWorkerConnect(func(ctx context.Context, event models.EventDahuaEventWorkerConnect) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaEventWorkerDisconnect(func(ctx context.Context, event models.EventDahuaEventWorkerDisconnect) error {
		return pub.Publish(ctx, event)
	})
	b.OnEventDahuaCoaxialStatus(func(ctx context.Context, event models.EventDahuaCoaxialStatus) error {
		return pub.Publish(ctx, event)
	})
	return b
}


func (b *Bus) OnEventDahuaDeviceCreated(h func(ctx context.Context, event models.EventDahuaDeviceCreated) error) {
	b.onEventDahuaDeviceCreated = append(b.onEventDahuaDeviceCreated, h)
}

func (b *Bus) OnEventDahuaDeviceUpdated(h func(ctx context.Context, event models.EventDahuaDeviceUpdated) error) {
	b.onEventDahuaDeviceUpdated = append(b.onEventDahuaDeviceUpdated, h)
}

func (b *Bus) OnEventDahuaDeviceDeleted(h func(ctx context.Context, event models.EventDahuaDeviceDeleted) error) {
	b.onEventDahuaDeviceDeleted = append(b.onEventDahuaDeviceDeleted, h)
}

func (b *Bus) OnEventDahuaDeviceEvent(h func(ctx context.Context, event models.EventDahuaDeviceEvent) error) {
	b.onEventDahuaDeviceEvent = append(b.onEventDahuaDeviceEvent, h)
}

func (b *Bus) OnEventDahuaEventWorkerConnecting(h func(ctx context.Context, event models.EventDahuaEventWorkerConnecting) error) {
	b.onEventDahuaEventWorkerConnecting = append(b.onEventDahuaEventWorkerConnecting, h)
}

func (b *Bus) OnEventDahuaEventWorkerConnect(h func(ctx context.Context, event models.EventDahuaEventWorkerConnect) error) {
	b.onEventDahuaEventWorkerConnect = append(b.onEventDahuaEventWorkerConnect, h)
}

func (b *Bus) OnEventDahuaEventWorkerDisconnect(h func(ctx context.Context, event models.EventDahuaEventWorkerDisconnect) error) {
	b.onEventDahuaEventWorkerDisconnect = append(b.onEventDahuaEventWorkerDisconnect, h)
}

func (b *Bus) OnEventDahuaCoaxialStatus(h func(ctx context.Context, event models.EventDahuaCoaxialStatus) error) {
	b.onEventDahuaCoaxialStatus = append(b.onEventDahuaCoaxialStatus, h)
}



func (b *Bus) EventDahuaDeviceCreated(event models.EventDahuaDeviceCreated) {
	for _, v := range b.onEventDahuaDeviceCreated {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaDeviceUpdated(event models.EventDahuaDeviceUpdated) {
	for _, v := range b.onEventDahuaDeviceUpdated {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaDeviceDeleted(event models.EventDahuaDeviceDeleted) {
	for _, v := range b.onEventDahuaDeviceDeleted {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaDeviceEvent(event models.EventDahuaDeviceEvent) {
	for _, v := range b.onEventDahuaDeviceEvent {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaEventWorkerConnecting(event models.EventDahuaEventWorkerConnecting) {
	for _, v := range b.onEventDahuaEventWorkerConnecting {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaEventWorkerConnect(event models.EventDahuaEventWorkerConnect) {
	for _, v := range b.onEventDahuaEventWorkerConnect {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaEventWorkerDisconnect(event models.EventDahuaEventWorkerDisconnect) {
	for _, v := range b.onEventDahuaEventWorkerDisconnect {
		busLogError(v(b.Context(), event))
	}
}

func (b *Bus) EventDahuaCoaxialStatus(event models.EventDahuaCoaxialStatus) {
	for _, v := range b.onEventDahuaCoaxialStatus {
		busLogError(v(b.Context(), event))
	}
}

